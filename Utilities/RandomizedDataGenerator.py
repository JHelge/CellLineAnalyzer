import numpy as np
import csv

from Utilities.SafeCastUtil import SafeCastUtil
from ArgumentProcessingService import ArgumentProcessingService


class RandomizedDataGenerator(object):

    GENERATED_DATA_FOLDER = "AutoGeneratedDataFolder"

    CATEGORICAL_SUFFIX = "_cat"
    INTEGER_SUFFIX = "_int"
    FLOAT_SUFFIX = "_float"

    PCT_CATEGORICAL = .1


    @staticmethod
    def generateRandomizdFiles(num_feature_files, num_cells, num_features, is_classifier):
        features = []

        for feature_name in range(1, num_features + 1):
            feature_name = "gen_feat_" + SafeCastUtil.safeCast(feature_name, str)
            rand = np.random.random_sample()
            if rand < RandomizedDataGenerator.PCT_CATEGORICAL:
                feature_name += RandomizedDataGenerator.CATEGORICAL_SUFFIX
            elif RandomizedDataGenerator.PCT_CATEGORICAL <= rand <\
                    (RandomizedDataGenerator.PCT_CATEGORICAL + (1 - RandomizedDataGenerator.PCT_CATEGORICAL) / 2):
                feature_name += RandomizedDataGenerator.INTEGER_SUFFIX
            else:
                feature_name += RandomizedDataGenerator.FLOAT_SUFFIX
            features.append(feature_name)

        features_per_file = SafeCastUtil.safeCast(num_features / num_feature_files, int)
        features_written = 0

        RandomizedDataGenerator.generateFeaturesCSVs(features, features_per_file, features_written, num_cells,
                                                     num_feature_files)

        RandomizedDataGenerator.generateResultsCSV(is_classifier, num_cells)
        RandomizedDataGenerator.generateArgsTxt(is_classifier)
        return

    @staticmethod
    def generateFeaturesCSVs(features, features_per_file, features_written, num_cells, num_files):
        for i in range(1, num_files + 1):
            with open(RandomizedDataGenerator.GENERATED_DATA_FOLDER + "/features" + str(i) + ".csv",
                      'w') as feature_file:
                writer = csv.writer(feature_file, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
                first_line = []
                for feature_name in range(features_written, features_written + features_per_file):
                    first_line += [features[feature_name]]
                writer.writerow(first_line)

                for cell in range(0, num_cells):
                    line = []
                    for feature_name in range(features_written, features_written + features_per_file):
                        if RandomizedDataGenerator.CATEGORICAL_SUFFIX in features[feature_name]:
                            line += [SafeCastUtil.safeCast(np.random.choice(["a", "b", "c", "d", "e"]), str)]
                        elif RandomizedDataGenerator.INTEGER_SUFFIX in features[feature_name]:
                            line += [SafeCastUtil.safeCast(np.random.randint(0, 100), str)]
                        else:
                            line += [SafeCastUtil.safeCast(np.random.random_sample(), str)]
                    writer.writerow(line)
                features_written += features_per_file

    @staticmethod
    def generateResultsCSV(is_classifier, num_cells):
        with open(RandomizedDataGenerator.GENERATED_DATA_FOLDER + "/" + ArgumentProcessingService.RESULTS + ".csv",
                  'w') as results_file:
            writer = csv.writer(results_file, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
            writer.writerow(["cell_line_name"] + ["result"])
            for cell in range(0, num_cells):
                cell_name = "cell_line" + SafeCastUtil.safeCast(cell, str)
                if is_classifier:
                    writer.writerow([cell_name, np.random.randint(0, 2)])
                else:
                    writer.writerow([cell_name, np.random.random_sample()])

    @staticmethod
    def generateArgsTxt(is_classifier):
        file_name = RandomizedDataGenerator.GENERATED_DATA_FOLDER + "/" + ArgumentProcessingService.ARGUMENTS_FILE
        args_file = open(file_name, 'w')
        classifier = '0'
        if is_classifier:
            classifier = '1'
        args_file.write('results=results.csv\n' +
                        'data_split=[80,10,10]\n' +
                        'is_classifier=' + classifier)
        args_file.close()

import numpy as np
import csv
import os

from Utilities.SafeCastUtil import SafeCastUtil


class RandomizedDataGenerator(object):

    GENERATED_DATA_FOLDER = "AutoGeneratedDataFolder"
    PCT_CATEGORICAL = .1


    @staticmethod
    def generateCSVs(num_files, num_cells, num_features, is_classifier):
        #TODO delete existing folder contents, create an arguments.txt file, finish feature writing.
        features = list(range(1, num_features + 1))

        categorical_features = []
        integer_features = []
        float_features = []
        unparsed_features = []

        for feature in range(0, len(features)):
            feature_name = "gen_feat_" + SafeCastUtil.safeCast(feature, str)
            rand = np.random.random_sample()
            if rand < RandomizedDataGenerator.PCT_CATEGORICAL:
                categorical_features.append(feature)
                feature_name += "_cat"
            elif RandomizedDataGenerator.PCT_CATEGORICAL <= rand <\
                    (RandomizedDataGenerator.PCT_CATEGORICAL + (1 - RandomizedDataGenerator.PCT_CATEGORICAL) / 2):
                integer_features.append(feature)
                feature_name += "_int"
            else:
                float_features.append(feature)
                feature_name += "_float"
            unparsed_features.append(feature_name)

        features_per_file = SafeCastUtil.safeCast(num_features / num_files, int)

        # for i in range(1, num_files + 1):
        #     with open(RandomizedDataGenerator.GENERATED_DATA_FOLDER + "/features " + str(i) + ".csv", 'w') as feature_file:
        #         writer = csv.writer(feature_file, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
                    # for feature in


        # RandomizedDataGenerator.generateResultsCSV(is_classifier, num_cells)
        return

    @staticmethod
    def generateResultsCSV(is_classifier, num_cells):
        with open(RandomizedDataGenerator.GENERATED_DATA_FOLDER + "/results.csv", 'w') as results_file:
            writer = csv.writer(results_file, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
            writer.writerow(["cell_line_name"] + ["result"])
            for cell in range(0, num_cells):
                cell_name = "cell_line" + SafeCastUtil.safeCast(cell, str)
                if is_classifier:
                    writer.writerow([cell_name, np.random.randint(0, 2)])
                else:
                    writer.writerow([cell_name, np.random.random_sample()])
